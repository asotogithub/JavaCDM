package trueffect.truconnect.api.crud.validation;

import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.is;
import static org.hamcrest.Matchers.lessThanOrEqualTo;
import static org.hamcrest.Matchers.notNullValue;
import static org.hamcrest.Matchers.nullValue;
import static org.junit.Assert.assertThat;

import trueffect.truconnect.api.commons.Constants;
import trueffect.truconnect.api.commons.model.CostDetail;
import trueffect.truconnect.api.commons.model.Placement;
import trueffect.truconnect.api.commons.model.importexport.MediaRawDataView;
import trueffect.truconnect.api.commons.validation.ApiValidationUtils;
import trueffect.truconnect.api.crud.EntityFactory;

import org.junit.Before;
import org.junit.Test;
import org.springframework.validation.BeanPropertyBindingResult;
import org.springframework.validation.FieldError;

import java.util.List;

/**
 * Placement Validation related unit tests
 * Created by marcelo.heredia on 10/13/2015.
 */
public class PlacementValidatorTest {
    private PlacementValidator validator;
    private Placement placement;
    private BeanPropertyBindingResult placementErrors;
    private MediaRawDataView mediaRawDataView;
    private BeanPropertyBindingResult mrdvErrors;

    @Before
    public void setUp() throws Exception {
        placement = EntityFactory.createPlacement();
        List<CostDetail> costDetails = EntityFactory.createCostDetailList(5);
        placement.setCostDetails(costDetails);
        validator = new PlacementValidator();
        mediaRawDataView = EntityFactory.createMediaRawDataView();
        placementErrors = new BeanPropertyBindingResult(placement, placement.getClass().getSimpleName().toLowerCase());
        mrdvErrors = new BeanPropertyBindingResult(mediaRawDataView,
                mediaRawDataView.getClass().getSimpleName());
    }

    @Test
    public void testStandalonePlacementPayloadOnCreate() throws Exception{
        validator.validateStandalonePlacementForCreate(placement, placementErrors);
        assertThat(placementErrors.hasErrors(), is(false));
    }

    @Test
    public void testStandalonePlacementPayloadOnUpdate() throws Exception{
        placement.setId(EntityFactory.random.nextLong());
        validator.validatePlacementForUpdate(placement.getId(), placement,
                placementErrors);
        assertThat(placementErrors.hasErrors(), is(false));
    }

    @Test
    public void testStandalonePlacementPayloadOnUpdateFailsDueToMissingCostDetails() throws Exception{
        placement.setId(EntityFactory.random.nextLong());
        placement.setCostDetails(null);
        validator.validatePlacementForUpdate(placement.getId(), placement, placementErrors);
        assertThat(placementErrors.hasErrors(), is(true));
        assertThat(placementErrors.getErrorCount(), is(1));
        FieldError error = (FieldError) placementErrors.getAllErrors().iterator().next();
        assertThat(error.getField(), is(equalTo("costDetails")));
        assertThat(error.getObjectName(), is(equalTo("placement")));
        assertThat(error.getDefaultMessage(), is(equalTo("Invalid costDetails, it cannot be empty.")));
    }

    @Test
    public void testSuccessPlacementValidationForImport() {
        mediaRawDataView.setPlacementName(EntityFactory.faker.letterify("??????"));
        mediaRawDataView.setExtPlacementId(EntityFactory.faker.numerify("#######"));
        validator.validateFieldsForImport(mediaRawDataView, mrdvErrors);
        assertThat(mrdvErrors, is(notNullValue()));
        assertThat(mrdvErrors.hasErrors(), is(false));
    }

    @Test
    public void testPassPlacementValidationForImportNameBlank() {
        mediaRawDataView.setSite(EntityFactory.faker.lorem().fixedString(120));
        mediaRawDataView.setSection(EntityFactory.faker.lorem().fixedString(120));
        mediaRawDataView.setAdWidth("9999");
        mediaRawDataView.setAdHeight("9999");
        mediaRawDataView.setPlacementName(null);
        mediaRawDataView.setPlacementProp1(null);
        mediaRawDataView.setPlacementProp2(null);
        mediaRawDataView.setPlacementProp3(null);
        mediaRawDataView.setPlacementProp4(null);
        mediaRawDataView.setPlacementProp5(null);
        validator.validateFieldsForImport(mediaRawDataView, mrdvErrors);
        assertThat(mrdvErrors, is(notNullValue()));
        assertThat(mrdvErrors.hasErrors(), is(false));
        assertThat(mrdvErrors.getErrorCount(), is(equalTo(0)));
        assertThat(mediaRawDataView.getPlacementName(), is(nullValue()));
        assertThat(mediaRawDataView.getPlacementNameAutoGenerated(), is(notNullValue()));
        assertThat(mediaRawDataView.getPlacementNameAutoGenerated().length(),
                is(lessThanOrEqualTo(Constants.DEFAULT_CHARS_LENGTH)));
    }

    @Test
    public void testFailedPlacementValidationForImportNameBlank() {
        mediaRawDataView.setSite(EntityFactory.faker.lorem().fixedString(125));
        mediaRawDataView.setSection(EntityFactory.faker.lorem().fixedString(125));
        mediaRawDataView.setAdWidth("9999");
        mediaRawDataView.setAdHeight("9999");
        mediaRawDataView.setPlacementName(null);
        validator.validateFieldsForImport(mediaRawDataView, mrdvErrors);
        assertThat(mrdvErrors, is(notNullValue()));
        assertThat(mrdvErrors.hasErrors(), is(true));
        assertThat(mrdvErrors.getErrorCount(), is(equalTo(1)));
        FieldError error = mrdvErrors.getFieldError("placementName");
        assertThat(error.getDefaultMessage(), is("The auto-generated concatenated placement " +
                "name exceeds the character limit (256) and will be truncated for you. " +
                "Confirm this placement name in TruAdvertiser after Import"));
        assertThat(error.getCode(), is(ApiValidationUtils.TYPE_IMPORT_WARNING));
        assertThat(mediaRawDataView.getPlacementName(), is(nullValue()));
        assertThat(mediaRawDataView.getPlacementNameAutoGenerated(), is(notNullValue()));
        assertThat(mediaRawDataView.getPlacementNameAutoGenerated().length(), is(equalTo(Constants.DEFAULT_CHARS_LENGTH)));
    }

    @Test
    public void testFailedPlacementValidationForImportNameExceedingMaxLength() {
        String placementName = EntityFactory.faker.lorem().fixedString(257);
        mediaRawDataView.setPlacementName(placementName);
        validator.validateFieldsForImport(mediaRawDataView, mrdvErrors);
        assertThat(mrdvErrors, is(notNullValue()));
        assertThat(mrdvErrors.hasErrors(), is(true));
        assertThat(mrdvErrors.getErrorCount(), is(equalTo(1)));

        FieldError error = mrdvErrors.getFieldError("placementName");
        assertThat(error.getField(), is(equalTo("placementName")));
        assertThat(error.getDefaultMessage(), is(equalTo("Invalid Placement Name. Max character limit is 256")));
    }

    @Test
    public void testFailedPlacementValidationForImportRestOfFieldsExceedingMaxLength() {
        String largeString = EntityFactory.faker.lorem().fixedString(501);
        mediaRawDataView.setExtPlacementId(largeString);
        mediaRawDataView.setPlacementProp1(largeString);
        mediaRawDataView.setPlacementProp2(largeString);
        mediaRawDataView.setPlacementProp3(largeString);
        mediaRawDataView.setPlacementProp4(largeString);
        mediaRawDataView.setPlacementProp5(largeString);
        validator.validateFieldsForImport(mediaRawDataView, mrdvErrors);
        assertThat(mrdvErrors, is(notNullValue()));
        assertThat(mrdvErrors.hasErrors(), is(true));
        assertThat(mrdvErrors.getErrorCount(), is(equalTo(6)));

        FieldError error = mrdvErrors.getFieldError("extPlacementId");
        assertThat(error.getField(), is(equalTo("extPlacementId")));
        assertThat(error.getObjectName(), is(equalTo("MediaRawDataView")));
        assertThat(error.getDefaultMessage(), is(equalTo("Invalid Ext Placement ID. Max character limit is 500")));

        for( int i = 1; i <= 5; i++) {
            error = mrdvErrors.getFieldError("placementProp" + i);
            assertThat(error.getField(), is(equalTo("placementProp" + i)));
            assertThat(error.getObjectName(), is(equalTo("MediaRawDataView")));
            assertThat(error.getDefaultMessage(), is(equalTo("Invalid PlacementProp" + i + ". Max character limit is 256")));
        }
    }

    @Test
    public void testFailedValidationInvalidCharactersOnName() {

        placement.setId(null);
        placement.setName("Site (1) Name(Ã±");
        validator.validateStandalonePlacementForCreate(placement, placementErrors);

        assertThat(placementErrors, is(notNullValue()));
        assertThat(placementErrors.hasErrors(), is(true));
        assertThat(placementErrors.getErrorCount(), is(equalTo(1)));
        FieldError fieldError = placementErrors.getFieldError();
        assertThat(fieldError, is(notNullValue()));
        assertThat(fieldError.getField(), is(equalTo("name")));
        assertThat(fieldError.getDefaultMessage(), is(equalTo("Invalid characters on Placement name")));
    }


}
